name: Build 
 
on: [push]
env:
  NexusArtifactRepo: https://nexus.lieberlieber.com/repository/lemontree-pipeline-tools
  ModelName: src\models\pwc.eapx
  
jobs:
  build:
 
    runs-on: windows-latest
    
    steps:
     - name: Checkout Code
       uses: actions/checkout@v1
     
     - name: Setup MSBuild Path
       uses: microsoft/setup-msbuild@v1.1
       
     - name: Setup NuGet
       uses: NuGet/setup-nuget@v1.0.6
     
     - name: Restore NuGet Packages
       run: nuget restore src/LemonTree.Pipeline.Tools.sln
 
     - name: Build Solution
       run: msbuild src/LemonTree.Pipeline.Tools.sln /p:Configuration=Release
       
     - name: Upload LemonTree.Pipeline.Tools.SetFilterInSessionFile.exe
       if: github.ref == 'refs/heads/main'
       run: |
          $targetUrl = "${{env.NexusArtifactRepo}}/LemonTree.Pipeline.Tools.SetFilterInSessionFile.exe"
          echo "Uploading 	LemonTree.Pipeline.Tools.SetFilterInSessionFile.exe to Nexus: $targetUrl"
          while (Test-Path Alias:curl) {Remove-Item Alias:curl} #remove the alias binding from curl to Invoke-WebRequest
          curl "-u${{secrets.NEXUSAUTHENTICATION}}" -T bin\LemonTree.Pipeline.Tools.SetFilterInSessionFile.exe $targetUrl
          
     - name: Upload LemonTree.Pipeline.Tools.RemovePrerenderedDiagrams.exe
       if: github.ref == 'refs/heads/main'
       run: |
          $targetUrl = "${{env.NexusArtifactRepo}}/LemonTree.Pipeline.Tools.RemovePrerenderedDiagrams.exe"
          echo "Uploading 	LemonTree.Pipeline.Tools.RemovePrerenderedDiagrams.exeto Nexus: $targetUrl"
          while (Test-Path Alias:curl) {Remove-Item Alias:curl} #remove the alias binding from curl to Invoke-WebRequest
          curl "-u${{secrets.NEXUSAUTHENTICATION}}" -T bin\LemonTree.Pipeline.Tools.RemovePrerenderedDiagrams.exe $targetUrl
     
     - name: Upload LemonTree.Pipeline.Tools.ModelCheck.exe
       if: github.ref == 'refs/heads/main'
       run: |
          $targetUrl = "${{env.NexusArtifactRepo}}/LemonTree.Pipeline.Tools.ModelCheck.exe"
          echo "Uploading 	LemonTree.Pipeline.Tools.ModelCheck.exe to Nexus: $targetUrl"
          while (Test-Path Alias:curl) {Remove-Item Alias:curl} #remove the alias binding from curl to Invoke-WebRequest
          curl "-u${{secrets.NEXUSAUTHENTICATION}}" -T bin\LemonTree.Pipeline.Tools.ModelCheck.exe $targetUrl
      
     - name: Run LemonTree Check Tool
       id: sysmlCheck
       run: |
          echo "starting validation"
          .\bin\LemonTree.Pipeline.Tools.ModelCheck.exe  --model "${{env.ModelName}}" --out ".\output.md"
          type "output.md"

          echo "finished validation with $LASTEXITCODE"

          #  Exit codes of the CLI application:
          #  * 0 = model is valid (no error, no warning, no runtime exception)
          #  * 1 = CLI argument parsing error occurred
          #  * 2 = other runtime exception occurred
          #  * 3 = model has at least one warning
          #  * 4 = model has at least one error

          $Message = "output.md"

          echo "::set-output name=ValidationExitCode::$($LASTEXITCODE)"
      
          #for now never stop 
          exit 0

     - name: Extract branch name
       shell: bash
       run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
       id: extract_branch

     - name: Find Pull Request
       uses: juliangruber/find-pull-request-action@v1
       id: find-pull-request
       with:
           branch: ${{ steps.extract_branch.outputs.branch }}

     - name: Read output.md
       if: ${{ steps.find-pull-request.outputs.number > 0}} #only makes sense if we have a PR for the branch
       id: package
       uses: juliangruber/read-file-action@v1
       with:
            path: .\output.md

     - name: Create PR comment
       if: ${{ steps.find-pull-request.outputs.number > 0}} #only makes sense if we have a PR for the branch
       uses: actions/github-script@v5
       with:
          script: |
            await github.rest.issues.createComment({
              issue_number: ${{ steps.find-pull-request.outputs.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${{ steps.package.outputs.content }}`
            })

     - name: evaulate Exit Code
       run: |
          echo "set job failed on ..."
          echo "Current Exit Code ${{ steps.sysmlCheck.outputs.ValidationExitCode }}"

          #  Exit codes of the CLI application:
          #  * 0 = model is valid (no error, no warning, no runtime exception)
          #  * 1 = CLI argument parsing error occurred
          #  * 2 = other runtime exception occurred
          #  * 3 = model has at least one warning
          #  * 4 = model has at least one error

          if (${{ steps.sysmlCheck.outputs.ValidationExitCode }} -eq 3)
          {
            #fail on warning
            Echo "model has at least one warning"
            #fail on warning
            #exit 3
            #ignore warning
            exit 0
          }
          elseif (${{ steps.sysmlCheck.outputs.ValidationExitCode }} -eq 4)
          {
              #fail on Error
              echo "model has at least one error"
              exit 4
          }
          elseif (${{ steps.sysmlCheck.outputs.ValidationExitCode }} -eq 0)
          {
            #brilliant model
            Echo "model is valid"
            exit 0
          }
          else
          {
            exit 1
          }